import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { build } from 'esbuild'
import sveltePlugin from 'esbuild-svelte'
import {sveltePreprocess} from 'svelte-preprocess'
import { copy } from 'esbuild-plugin-copy'
import path from 'path'

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	plugins: [
		sveltePlugin({
			preprocess: sveltePreprocess(),
		}),
		copy({
			assets: {
			from: ['./assets/styles.css', 'manifest.json'],
			to: ['./'],
			}
		}),
		// {
		// 	name: 'resolve-minisearch',
		// 	setup(build) {
		// 	build.onResolve({ filter: /^minisearch$/ }, () => {
		// 		return { path: path.resolve('node_modules/minisearch/src/MiniSearch.ts') };
		// 	});
		// 	},
		// },
		],
	format: "cjs",
	target: "chrome98",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: path.join('./dist', 'main.js'),
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}

